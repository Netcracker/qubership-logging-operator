{{- if .Values.Fluentbit.MockKubeData }}
@INCLUDE /fluent-bit/etc/filter-kubernetes-mock.conf
{{- else }}

# Add Kubernetes metadata, like pod name, namespace, container name, etc.
[FILTER]
    Name                 kubernetes
    Match                pods*
    Kube_URL             https://kubernetes.default.svc:443
    Kube_CA_File         /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    Kube_Token_File      /var/run/secrets/kubernetes.io/serviceaccount/token
{{- if eq .Values.ContainerRuntimeType "docker" }}
    Kube_Tag_Prefix      pods.var.log.containers.
{{- else }}
    Kube_Tag_Prefix      pods.var.log.pods.
    Regex_Parser         kube-meta
{{- end }}
    Merge_Log            Off
    K8S-Logging.Parser   On
    K8S-Logging.Exclude  Off
    Buffer_Size          0
{{- end }}

# All labels store in the "kubernetes" field, so we need to lift them on the top level
# Next, we will remove all unnecessary fields
[FILTER]
    Name                 nest
    Match                pods*
    Operation            lift
    Wildcard             kubernetes.*
    Nest_under           kubernetes
    Remove_prefix        kubernetes.

# Rename the fields to be more consistent with Monitoring labels
[FILTER]
    Name                 modify
    Match                pods*
    Hard_rename          container_name container
    Hard_rename          namespace_name namespace
    Hard_rename          pod_name pod

# Remove the fields that are not needed
[FILTER]
    Name                 record_modifier
    Match                pods*
    Allowlist_key        namespace
    Allowlist_key        pod
    Allowlist_key        container
    Allowlist_key        source
    Allowlist_key        labels
    Allowlist_key        log
    Allowlist_key        time
    Allowlist_key        level

# First, we need to use specific parsers to parse the logs for Kubernetes components

# Kubernetes components
# DaemonSet: kube-proxy
# Pods: kube-scheduler, kube-controller-manager, kube-apiserver
[FILTER]
    Name                 parser
    Match_Regex          pods.*(kube-system).*
    Key_Name             log
    Parser               klog_trace_entry
    Reserve_Data         On
    Preserve_Key         On

# Etcd
# Pods: etcd
[FILTER]
    Name                 parser
    Match_Regex          pods.*etcd.*
    Key_Name             log
    Parser               json
    Reserve_Data         On
    Preserve_Key         On

# CoreDNS
# Deployments: coredns
[FILTER]
    Name                 parser
    Match_Regex          pods.*coredns.*
    Key_Name             log
    Parser               coredns
    Reserve_Data         On
    Preserve_Key         On

[FILTER]
    Name                 parser
    Match_Regex          pods.*nginx.*
    Key_Name             log
    Parser               k8s-nginx-ingress
    Reserve_Data         On
    Preserve_Key         On

# Second, we need to use specific parsers to parse the logs for well-known
# third-party applications with custom log formats

# Jaeger
[FILTER]
    Name                 modify
    Match_Regex          pods.*jaeger.*
    Remove               ts

[FILTER]
    Name                 parser
    Match_Regex          pods.*jaeger.*
    Key_Name             log
    Parser               json
    Reserve_Data         On
    Preserve_Key         On

# Cassandra
[FILTER]
    Name                 parser
    Match_Regex          pods.*cassandra.*
    Key_Name             log
    Parser               cassandra
    Reserve_Data         On
    Preserve_Key         On

# Consul
[FILTER]
    Name                 parser
    Match_Regex          pods.*consul.*
    Key_Name             log
    Parser               consul
    Reserve_Data         On
    Preserve_Key         On

# PostgreSQL
# StatefulSet "pg-patroni-nodeX" (example, pg-patroni-node1)
[FILTER]
    Name                 parser
    Match_Regex          pods.*(postgres|patroni|pg).*
    Key_Name             log
    Parser               postgres
    Reserve_Data         On
    Preserve_Key         On

# MongoDB, StatefulSet "cnfrsX-X" (example, cnfrs0-0)
[FILTER]
    Name                 parser
    Match_Regex          pods.*mongo.*.cnfrs.*
    Key_Name             log
    Parser               mongodb_structured
    Reserve_Data         On
    Preserve_Key         On

# ArgoCD
# Deployments: argocd-server, argocd-repo-server, argocd-dex-server, argocd-notifications-controller, argocd-applicationset-controller
# StatefulSet: argocd-application-controller
[FILTER]
    Name                 parser
    Match_Regex          pods.*argocd-(?!redis).*
    Key_Name             log
    Parser               logfmt
    Reserve_Data         On
    Preserve_Key         On

# Last, we need to use the common parsers to parse the logs for other applications
[FILTER]
    Name                 parser
    Match                pods*
    Key_name             log
    Parser               json
    Reserve_Data         On
    Preserve_Key         On

# TODO: where is the right place to put this filter?
[FILTER]
    Name                 parser
    Match_Regex          pods*
    Key_Name             log
    Parser               level_parser_common_keep
    Reserve_Data         On
    Preserve_Key         On
