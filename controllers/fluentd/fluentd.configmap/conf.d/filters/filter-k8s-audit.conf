# Filter Grafana logs to parse part of these logs as audit logs
# Parse from Pods where container name contains "grafana"
<filter parsed.kubernetes.var.log.**grafana**>
  @type record_transformer
  enable_ruby
  <record>
    nc_audit_label '${ if ( (record["log"].include? "Invalid username or password") || (record["log"].include? "Successful Login") || (record["log"].include? "Successful Logout") || (record["log"].include? "Failed to look up user based on cookie") ) then "true" end; }'
  </record>
</filter>

# Filter MongoDB logs to parse part of these logs as audit logs
# Parse from Pods where container name contains "mongos"
<filter parsed.kubernetes.var.log.**mongos**>
  @type record_transformer
  enable_ruby
  <record>
    nc_audit_label '${ if ( (record["log"].include? "accepted") || (record["log"].include? "mongodb") ) then "true" end; }'
  </record>
</filter>

# Filter PostgreSQL logs to parse part of these logs as audit logs
# Parse from Pods where container name contains "patroni"
<filter parsed.kubernetes.var.log.**>
  @type record_transformer
  enable_ruby
  <record>
    nc_audit_label '${ if (record["log"].respond_to?(:to_str) && ( (record["log"].include? "PG_SERVICE") || (record["log"].include? "database system is") || (record["log"].include? "audit_log_type") || (record["log"].include? "AUDIT") || (/logType[\": \t]*audit/.match(record["log"])) ) ) then "true" end; }'
  </record>
</filter>

# Filter all other logs to parse part of these logs as audit logs
# Conditions:
# * contains audit_log_type in log
# * contains "logType: audit" or "logType=audit" in log
<filter parsed.kubernetes.var.log.**>
  @type record_transformer
  enable_ruby
  <record>
    nc_audit_label '${ record["log"].respond_to?(:to_str) && ( (record["log"].include? "audit_log_type") || (/logType[":\s\t=]*audit/.match(record["log"])) ) ? "true" : "false" }'
  </record>
</filter>