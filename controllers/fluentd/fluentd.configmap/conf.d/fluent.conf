@include /fluentd/etc/system.conf

# Worker to provide stable health probe
<worker 0>
  # Enable health check on the port 24220
  @include /fluentd/etc/input-monitor.conf
{{- if .Values.Fluentd.GraylogOutput }}
  # Include in the health check connection status to Graylog
  @include /fluentd/etc/check.conf
{{- end }}
</worker>

# Worker to read/process/send logs
<worker 1>
  # Expose metrics in Prometheus format
  @include /fluentd/etc/input-prometheus.conf

  {{- if .Values.Fluentd.ContainerLogging }}
  # Read logs from kubernetes pods from /var/log/pods (or /var/logs/containers)
  @include /fluentd/etc/input-k8s-container.conf
  {{- end }}

  # Empty input to insert any customization
  @include /fluentd/etc/input-custom.conf

  {{- if ne .Values.ContainerRuntimeType "docker" }}
  # If logs line more that 16 KB, containerd/CRI will separate this line on some by 16 KB
  # So on this step need first time concat some lines in one
  @include /fluentd/etc/filter-k8s-container-multiline.conf
  {{- end }}

  # Try to detect multiline exceptions and popular stacktrace formats to merge their lines in one
  @include /fluentd/etc/filter-k8s-container-detect-exceptions.conf

  # Calculate count of input K8S messages to expose as metrics (fluentd_input_num_records_total)
  # Here these messages has raw.* prefix
  @include /fluentd/etc/filter-input-k8s-messages-prometheus.conf

  {{- if .Values.Fluentd.SystemAuditLogging }}
  # Read OS Audit logs from /var/log/audit/audit.log
  # TODO: parsing of OS log may be move in separated worker, why we didn't do it?
  @include /fluentd/etc/input-os-audit.conf
  {{- end }}

  {{- if .Values.Fluentd.SystemLogging }}
  # Read OS log messages from /var/log/messages or /var/log/syslog or /var/log/journal (depends on OS type)
  @include /fluentd/etc/input-os-messages.conf
  {{- end }}

  {{- if .Values.Fluentd.KubeAuditLogging }}
  # Read Kubernetes audit logs from /var/log/kubernetes/kube-apiserver-audit.log and /var/log/kubernetes/audit.log
  @include /fluentd/etc/input-k8s-audit.conf
  {{- end }}

  {{- if .Values.Fluentd.KubeApiserverAuditLogging }}
  # Read Kubernetes APIServer audit logs from /var/log/kube-apiserver/audit.log
  # In the case of OpenShift from /var/log/openshift-apiserver/audit.log
  @include /fluentd/etc/input-k8s-apiserver-audit.conf
  {{- end }}

  # Calculate count of input other messages to expose as metrics (fluentd_input_num_records_total)
  # Here these messages already has "parsed.*" prefix
  @include /fluentd/etc/filter-input-other-messages-prometheus.conf

  # Add "hostname" field/label in every log message
  @include /fluentd/etc/filter-add-hostname.conf

  # Try to detect all other multilines
  # All multilines for this plugins should start from specific pattern
  # There are two options:
  # * If single line - go to next filters and next go to section @NORMAL
  # * If multiline - skip next filters, go to @CONCATENATED and only next go to @NORMAL
  @include /fluentd/etc/filter-multiline.conf

  # Graylog don't allow send messages with empty "log" field/label, so need detect them and remove
  @include /fluentd/etc/filter-k8s-remove-empty-log.conf

  # Request pods metadata from Kubernetes APIServer and add as fields/labels to each log
  @include /fluentd/etc/filter-k8s-metadata.conf

  # Parse key=values pairs from the [key=value]
  @include /fluentd/etc/filter-parse-key-value.conf

  # Detect audit logs and add a special tag "nc_audit_label"
  @include /fluentd/etc/filter-k8s-audit.conf

  {{- if .Values.Fluentd.BillCycleConf }}
  # Detect bill cycle logs and add a special tag nc_bill_cycle_label
  @include /fluentd/etc/filter-k8s-bill-cycle.conf
  {{- end }}

  # Calculate count of parsed messages to expose as metrics (fluentd_parsed_num_records_total)
  @include /fluentd/etc/filter-parsed-messages-prometheus.conf

  # Log procession complete here, go to @NORMAL
  <match **>
    @type relabel
    @label @NORMAL
  </match>

  # to capture fluentd logs in top level it's necessary to use <label @FLUENT_LOG>
  <label @FLUENT_LOG>
    <match fluent.**>
      @type stdout
    </match>
  </label>

  # Here processed all logs that were build from some lines
  # In this section logs send after "filter-multiline.conf" so need to call last 3 filters
  <label @CONCATENATED>
    # Graylog don't allow send messages with empty "log" field/label, so need detect them and remove
    @include /fluentd/etc/filter-k8s-remove-empty-log.conf

    # Request pods metadata from Kubernetes APIServer and add as fields/labels to each log
    @include /fluentd/etc/filter-k8s-metadata.conf

    # Parse key=values pairs from the [key=value]
    @include /fluentd/etc/filter-parse-key-value.conf

    # Detect audit logs and add a special tag "nc_audit_label"
    @include /fluentd/etc/filter-k8s-audit.conf

    {{- if .Values.Fluentd.BillCycleConf }}
    # Detect bill cycle logs and add a special tag nc_bill_cycle_label
    @include /fluentd/etc/filter-k8s-bill-cycle.conf
    {{- end }}

    # Calculate count of parsed messages to expose as metrics (fluentd_parsed_num_records_total)
    @include /fluentd/etc/filter-parsed-messages-prometheus.conf

    # Log procession complete here, go to @NORMAL
    <match **>
      @type relabel
      @label @NORMAL
    </match>
  </label>

  # Here processed all single log lines or miltiline already concated in one message
  # In this section logs can be route "filter-k8s-metadata.conf"
  <label @NORMAL>
    # Process all custom filters for applications
    @include /fluentd/etc/filter-app-*.conf

{{- if .Values.Fluentd.ExtraFields }}
    # Add custom fields/labels to every log
    # This filter will override existing fields if their keys match those specified in this filter
    @include /fluentd/etc/filter-additional-fields.conf
{{- end }}

{{- if or .Values.Fluentd.GraylogOutput (and .Values.Fluentd.Output .Values.Fluentd.Output.Loki .Values.Fluentd.Output.Loki.Enabled) }}
    @include /fluentd/etc/filter-add-stream.conf
{{- end }}
    # Empty filter to insert any customization
    @include /fluentd/etc/filter-custom.conf

    # Empty output to insert any customization
    @include /fluentd/etc/output-custom.conf
{{- if or .Values.Fluentd.GraylogOutput (and .Values.Fluentd.Output .Values.Fluentd.Output.Loki .Values.Fluentd.Output.Loki.Enabled) }}
    # Default Graylog or/and Grafana Loki output
    @include /fluentd/etc/output.conf
{{- end }}
  </label>
</worker>
