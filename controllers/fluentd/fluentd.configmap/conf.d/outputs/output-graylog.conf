{{- if .Values.Fluentd.GraylogOutput }}
<store ignore_error>
  @type gelf
  @id output_gelf
  @log_level warn
  host "#{ENV['GRAYLOG_HOST']}"
  port "#{ENV['GRAYLOG_PORT']}"
  protocol "#{ENV['GRAYLOG_PROTOCOL']}"
  tls {{ if .Values.Fluentd.TLS.Enabled }}true{{ else }}false{{ end }}
{{- if .Values.Fluentd.TLS }}
  tls_options {
    # Supported tls_options:
    #   'no_default_ca' [Boolean] prevents OpenSSL from using the systems CA store.
    #   'version' [Symbol] any of :TLSv1, :TLSv1_1, :TLSv1_2 (default)
    #   'ca' [String] the path to a custom CA store
    #   'cert' [String, IO] the client certificate file
    #   'key' [String, IO] the key for the client certificate
    #   'all_ciphers' [Boolean] allows any ciphers to be used, may be insecure
    #   'rescue_ssl_errors' [Boolean] similar to rescue_network_errors in notifier.rb, allows SSL exceptions to be raised
    #   'no_verify' [Boolean] disable peer verification
    "no_default_ca":  {{ .Values.Fluentd.TLS.NoDefaultCA }},
{{- if .Values.Fluentd.TLS.Version }}
    "version": "{{ .Values.Fluentd.TLS.Version }}",
{{- end }}
{{- if or (and .Values.Fluentd.TLS.GenerateCerts .Values.Fluentd.TLS.GenerateCerts.Enabled) (and .Values.Fluentd.TLS.CA .Values.Fluentd.TLS.CA.SecretName .Values.Fluentd.TLS.CA.SecretKey) }}
    "ca": "/fluentd/tls/ca.crt",
{{- end }}
{{- if or (and .Values.Fluentd.TLS.GenerateCerts .Values.Fluentd.TLS.GenerateCerts.Enabled) (and .Values.Fluentd.TLS.Cert .Values.Fluentd.TLS.Cert.SecretName .Values.Fluentd.TLS.Cert.SecretKey) }}
    "cert": "/fluentd/tls/tls.crt",
{{- end }}
{{- if or (and .Values.Fluentd.TLS.GenerateCerts .Values.Fluentd.TLS.GenerateCerts.Enabled) (and .Values.Fluentd.TLS.Key .Values.Fluentd.TLS.Key.SecretName .Values.Fluentd.TLS.Key.SecretKey) }}
    "key": "/fluentd/tls/tls.key",
{{- end }}
    "all_ciphers": {{ .Values.Fluentd.TLS.AllCiphers }},
    "rescue_ssl_errors": {{ .Values.Fluentd.TLS.RescueSslErrors }},
    "no_verify": {{ .Values.Fluentd.TLS.NoVerify }}
  }
{{- end }}
  retry_wait 1s
  <buffer>
  {{- if .Values.Fluentd.FileStorage }}
    @type file
    @id output_buffer
    path /tmp/fluentd/buffer
  {{- end }}
    flush_interval {{ default "5s" .Values.Fluentd.GraylogBufferFlushInterval }}
    retry_max_interval 64
    chunk_limit_size 10m
    flush_thread_count 32
    retry_forever false
    total_limit_size {{ default "512MB" .Values.Fluentd.TotalLimitSize }}
    retry_max_times 32
    compress {{ default "text" .Values.Fluentd.Compress }}
  </buffer>
</store>
{{- end }}
